networks:
  default:
    interface: eth0
    address: 192.168.128.2
    netmask: 255.255.255.0
    gateway: 192.168.128.1

swh::postgres::service::users:
  - swhstorage

# open objstorage api
swh::deploy::objstorage::backend::listen::host: 0.0.0.0
swh::deploy::objstorage::backend::workers: 4
swh::deploy::objstorage::directory: "%{hiera('swh::deploy::storage::directory')}"
swh::deploy::objstorage::slicing: 0:1/1:5

swh::remote_service::objstorage::config:
  cls: pathslicing
  args:
    root: "%{hiera('swh::deploy::storage::directory')}"
    slicing: "%{hiera('swh::deploy::objstorage::slicing')}"

# Deploy the storage server as a public resource
swh::deploy::storage::backend::listen::host: 0.0.0.0
swh::deploy::storage::backend::workers: 4
swh::deploy::storage::backend::max_requests: 100
swh::deploy::storage::backend::max_requests_jitter: 10

# Deploy the indexer storage server as a public resource
swh::deploy::indexer::storage::backend::listen::host: 0.0.0.0
swh::deploy::indexer::storage::backend::workers: 4

nginx::worker_processes: 4

swh::deploy::storage::config:
  storage:
    cls: local
    args:
      db: "host=%{hiera('swh::deploy::storage::db::host')} port=%{hiera('swh::deploy::storage::db::port')} user=%{hiera('swh::deploy::storage::db::user')} dbname=%{hiera('swh::deploy::storage::db::dbname')} password=%{hiera('swh::deploy::storage::db::password')}"
      objstorage: "%{alias('swh::remote_service::objstorage::config')}"
  journal_writer:
    cls: kafka
    args:
      brokers: "%{alias('swh::deploy::journal::brokers')}"
      prefix: "%{alias('swh::deploy::journal::prefix')}"
      client_id: "swh.storage.journal_writer.%{::swh_hostname.short}"
      message.max.bytes: 1000000000
